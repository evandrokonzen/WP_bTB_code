for(i in 1:numSamples_modelFit){
for(test in 1:numTests){
num_ids_test <- rep(0, maxt)
for(tt in 1:maxt){
num_ids_test[tt] <- nExpTestedPerGroup[[g]][tt,i,test] +
nInfTestedPerGroup[[g]][tt,i,test] +
nSusTestedPerGroup[[g]][tt,i,test]
if(num_ids_test[tt] > 0){
predPosit <- CalcPredPosit(nInf=nInfTestedPerGroup[[g]][tt, i, test],
nSus=nSusTestedPerGroup[[g]][tt, i, test],
nExp=nExpTestedPerGroup[[g]][tt, i, test],
theta=thetaPost[i, test],
rho=rhoPost[i, test],
phi=phiPost[i, test])
ttYear <- yearsttMat$year[yearsttMat$tt==tt]
postPredPosPerGroup[i,test,ttYear,g] <- predPosit +
postPredPosPerGroup[i,test,ttYear,g]
}
}
# putting NA where at years in which the test wasn't taken
for(ttYear in 1:maxtYear){
tts <- yearsttMat$tt[yearsttMat$year==ttYear]
if(sum(num_ids_test[tts])==0){
postPredPosPerGroup[i,test,ttYear,g] <- NA
}
}
}
if(i%%500==0){
cat(paste0("i=", i, " out of numSamples=", numSamples_modelFit, " finished \n"))
}
}
cat(paste0("g=", g, " out of G=", length(gVec), " finished \n"))
}
ObservedNegMat <- matrix(0, numTests, maxtYear)
gVec <- 1:G
ObservedNegPerGroup <- replicate(length(gVec), ObservedNegMat)
# array of numTests x numYears x numGroups
for(g in gVec){
for(test in 1:numTests){
TestMat_g <- filter(TestMat, group==g)
num_ids_test <- rep(0, maxt)
for(tt in 1:maxt){
TestMat_tt <- filter(TestMat_g, time==tt)
if(nrow(TestMat_tt)>0){
ids_test_tt <- TestMat_tt$idNumber[(!is.na(TestMat_tt[, 3+test]))]
num_ids_test[tt] <- length(ids_test_tt)
if(num_ids_test[tt] > 0){
ttYear <- yearsttMat$year[yearsttMat$tt==tt]
obsNegat <- sum(TestMat_tt[, 3+test]==0L, na.rm = T)
ObservedNegPerGroup[test, ttYear, g] <- obsNegat +
ObservedNegPerGroup[test, ttYear, g]
}
}
}
# putting NA where at years in which the test wasn't taken
for(ttYear in 1:maxtYear){
tts <- yearsttMat$tt[yearsttMat$year==ttYear]
if(sum(num_ids_test[tts])==0){
ObservedNegPerGroup[test, ttYear, g] <- NA
}
}
}
cat(paste0("g=", g, " out of G=", length(gVec), " finished \n"))
}
numTestPositPerGroup <- array(0, c(numSamples_modelFit, numTests, maxtYear))
postPredNegPerGroup <- replicate(length(gVec), numTestPositPerGroup)
for(g in gVec){
for(i in 1:numSamples_modelFit){
for(test in 1:numTests){
num_ids_test <- rep(0, maxt)
for(tt in 1:maxt){
num_ids_test[tt] <- nExpTestedPerGroup[[g]][tt,i,test] +
nInfTestedPerGroup[[g]][tt,i,test] +
nSusTestedPerGroup[[g]][tt,i,test]
if(num_ids_test[tt] > 0){
predNegat <- CalcPredNegat(nInf=nInfTestedPerGroup[[g]][tt, i, test],
nSus=nSusTestedPerGroup[[g]][tt, i, test],
nExp=nExpTestedPerGroup[[g]][tt, i, test],
theta=thetaPost[i, test],
rho=rhoPost[i, test],
phi=phiPost[i, test])
ttYear <- yearsttMat$year[yearsttMat$tt==tt]
postPredNegPerGroup[i,test,ttYear,g] <- predNegat +
postPredNegPerGroup[i,test,ttYear,g]
}
}
# putting NA where at years in which the test wasn't taken
for(ttYear in 1:maxtYear){
tts <- yearsttMat$tt[yearsttMat$year==ttYear]
if(sum(num_ids_test[tts])==0){
postPredNegPerGroup[i,test,ttYear,g] <- NA
}
}
}
if(i%%500==0){
cat(paste0("i=", i, " out of numSamples=", numSamples_modelFit, " finished \n"))
}
}
cat(paste0("g=", g, " out of G=", length(gVec), " finished \n"))
}
## now produce plots
pdf("temp.pdf", width = 180 * 0.0393701, height = 100 * 0.0393701)
for(g in gVec) {
cat(paste0("Plotting group ", g, "\n"))
dfpos <- list()
dfneg <- list()
obspos <- list()
obsneg <- list()
for(j in 1:(numTests - 1)) {
if(j == 1) {
# joining Brock1 and Brock2
obsPos1 <- ObservedPosPerGroup[1, , g]
obsPos2 <- ObservedPosPerGroup[2, , g]
obsPos <- rep(NA, length(obsPos1))
for(ii in 1:length(obsPos1)) {
res <- is.na(obsPos1[ii]) & is.na(obsPos2[ii])
if(!res){
obsPos[ii] <- sum(c(obsPos1[ii], obsPos2[ii]), na.rm=T)
}
}
tab1 <- postPredPosPerGroup[, 1, , g]
tab2 <- postPredPosPerGroup[, 2, , g]
df <- matrix(NA, nrow(tab1), ncol(tab1))
for(irow in 1:nrow(tab1)){
for(icol in 1:ncol(tab1)){
res <- is.na(tab1[irow,icol]) & is.na(tab2[irow,icol])
if(!res){
df[irow,icol] <- sum(c(tab1[irow,icol], tab2[irow,icol]), na.rm=T)
}
}
}
} else {
obsPos <- ObservedPosPerGroup[j + 1, , g]
df <- postPredPosPerGroup[, j + 1, , g]
}
obspos[[j]] <- data.frame(time = 1:maxtYear, obs = obsPos)
dfpos[[j]] <- data.frame(
time = 1:maxtYear,
pos_mean = apply(df, 2, mean, na.rm = TRUE),
pos_LCI = apply(df, 2, quantile, probs = 0.025, na.rm = TRUE),
pos_UCI = apply(df, 2, quantile, probs = 0.975, na.rm = TRUE)
)
## test negatives
if(j == 1) {
# joining Brock1 and Brock2
obsNeg1 <- ObservedNegPerGroup[1, , g]
obsNeg2 <- ObservedNegPerGroup[2, , g]
obsNeg <- rep(NA, length(obsNeg1))
for(ii in 1:length(obsNeg1)) {
res <- is.na(obsNeg1[ii]) & is.na(obsNeg2[ii])
if(!res){
obsNeg[ii] <- sum(c(obsNeg1[ii], obsNeg2[ii]), na.rm=T)
}
}
tab1 <- postPredNegPerGroup[, 1, , g]
tab2 <- postPredNegPerGroup[, 2, , g]
df <- matrix(NA, nrow(tab1), ncol(tab1))
for(irow in 1:nrow(tab1)){
for(icol in 1:ncol(tab1)){
res <- is.na(tab1[irow,icol]) & is.na(tab2[irow,icol])
if(!res){
df[irow,icol] <- sum(c(tab1[irow,icol], tab2[irow,icol]), na.rm=T)
}
}
}
} else {
obsNeg <- ObservedNegPerGroup[j + 1, , g]
df <- postPredNegPerGroup[, j + 1, , g]
}
obsneg[[j]] <- data.frame(time = 1:maxtYear, obs = obsNeg)
dfneg[[j]] <- data.frame(
time = 1:maxtYear,
neg_mean = apply(df, 2, mean, na.rm = TRUE),
neg_LCI = apply(df, 2, quantile, probs = 0.025, na.rm = TRUE),
neg_UCI = apply(df, 2, quantile, probs = 0.975, na.rm = TRUE)
)
}
names(dfpos) <- c("Brock", testNames[3:6])
names(dfneg) <- c("Brock", testNames[3:6])
names(obspos) <- c("Brock", testNames[3:6])
names(obsneg) <- c("Brock", testNames[3:6])
## combine data frames together and wrangle correctly
pListTests <- inner_join(
bind_rows(dfpos, .id = "var"),
bind_rows(dfneg, .id = "var"),
by = c("time", "var")
) %>%
pivot_longer(!c(var, time)) %>%
separate(name, c("type", "est"), sep = "_") %>%
pivot_wider(names_from = est, values_from = value)
obs <- inner_join(
bind_rows(obspos, .id = "var"),
bind_rows(obsneg, .id = "var"),
by = c("time", "var"),
suffix = c("_pos", "_neg")
) %>%
pivot_longer(!c(var, time)) %>%
separate(name, c("type", "est"), sep = "_") %>%
pivot_wider(names_from = est, values_from = value) %>%
dplyr::select(!type)
## create facet_wrapped plots for positives and negatives
pListTests$time <- startingYear + pListTests$time - 1
obs$time <- startingYear + obs$time - 1
## posterior mode changepoint
xiVals <- out_[,"xi"]
uniqueVals <- unique(xiVals)
xiMode <- uniqueVals[which.max(tabulate(match(xiVals, uniqueVals)))]
xiMode_ <- dfTimes$idx[dfTimes$time==xiMode]
xiMode__ <- yearsttMat$year[yearsttMat$tt==xiMode_]
## dummy data frame for vline
dummy <- data.frame(time = startingYear + xiMode__ - 1, var = "Brock")
p <- list()
p[[1]] <- ggplot(filter(pListTests, type == "pos"), aes(x = time)) +
geom_ribbon(aes(ymin = LCI, ymax = UCI), alpha = 0.5) +
geom_line(aes(y = mean)) +
geom_point(aes(y = pos), data = obs, size = 0.5) +
geom_vline(aes(xintercept = time), data = dummy) +
facet_wrap(~var, nrow = 1) +
xlab("Year") +
ylab("Number") +
ggtitle("Test positives")
p[[2]] <- ggplot(filter(pListTests, type == "neg"), aes(x = time)) +
geom_ribbon(aes(ymin = LCI, ymax = UCI), alpha = 0.5) +
geom_line(aes(y = mean)) +
geom_point(aes(y = neg), data = obs, size = 0.5) +
geom_vline(aes(xintercept = time), data = dummy) +
facet_wrap(~var, nrow = 1) +
xlab("Year") +
ylab("Number") +
ggtitle("Test negatives")
p <- wrap_plots(p, nrow = 2)
## play around with formatting
p <- p & theme_minimal(base_size = 7)
p <- p & theme(axis.text.x = element_text(angle = 45, hjust = 1),
text = element_text(family = "Helvetica"),
plot.title = element_text(size = 7, hjust = 0.5))
p <- p + plot_annotation(title = parNamesPlot[g],
theme = theme(plot.title = element_text(size = 8, hjust = 0)))
## save plot for group
print(p)
}
dev.off()
## save out and embed fonts
fileName <- paste0(pathForPlots, "modelFit_socialGroup.pdf")
embed_fonts("temp.pdf", outfile = fileName)
file.remove("temp.pdf")
library(tidyr)
library(viridis)
library(extrafont)
SocGroup <- LocateIndiv(TestMat_, birthTimes) # (m x maxt) matrix
nTotByGroup <- nSusByGroup + nExpByGroup + nInfByGroup
post_alphas <- out_[,1:G]
post_beta <- out_[,"beta"]
post_q <- out_[,"q"]
numSamples
numSamples=1000
sel <- seq(1, length(post_beta), length.out=numSamples)
infTimes <- infTimes[ , sel]
infectivityTimes <- infectivityTimes[ , sel]
deathTimes <- deathTimes[ , sel]
nSusByGroup <- nSusByGroup[ , , sel]
nExpByGroup <- nExpByGroup[ , , sel]
nInfByGroup <- nInfByGroup[ , , sel]
nTotByGroup <- nSusByGroup + nExpByGroup + nInfByGroup
post_alphas <- post_alphas[ sel, ]
post_beta <- post_beta[sel]
post_q <- post_q[sel]
infTimes[which(is.na(infTimes), arr.ind=T)] <- -10L
infectivityTimes[which(is.na(infectivityTimes), arr.ind=T)] <- -10L
deathTimes[which(is.na(deathTimes), arr.ind=T)] <- -10L
# relRatesByIndivIter will be a (m x maxt x numSamples) array
NAmatrix <- matrix(NA, m, maxt)
t0 <- proc.time()
relRatesByIndivIter <- CalcIndivRcorretion(NAmatrix = NAmatrix,
SocGroup=SocGroup,
infTimes=infTimes,
infectivityTimes=infectivityTimes,
deathTimes=deathTimes,
nInfByGroup=nInfByGroup,
nTotByGroup=nTotByGroup,
alphas=post_alphas, beta=post_beta, q_=post_q, K=K)
proc.time() - t0
# this takes about 12s if numSamples == 2000
Ri <- matrix(NA, m, numSamples)
for(i in 1:m){
for(j in 1:numSamples){
if(!all(is.na(relRatesByIndivIter[i,,j]))){
Ri[i,j] <- sum(relRatesByIndivIter[i,,j], na.rm = T)
}
}
if(i%%500==0){print(i)}
}
### Population-level R  -- simple average of R_is
means <- apply(Ri, 2, function(j) mean(j, na.rm = T))
# Plotting posterior distribution of the average population R
fileName <- paste0(pathForPlots, "PopR_PostDist_simpleAvg.pdf")
p <- PlotSingleDensity(vec=means,
# xlim=c(0.78,0.95),
ylab="Density",
# xlab=bquote("population-level R: simple average of "*R[i]*"s"),
xlab="Population R",
# title="Posterior distribution for the mean",
axisTextFontSize=16,
axisTitleFontSize=16,
mainTitleFontSize=12)
p <- p + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
## save for later patchwork
pPopR <- p
############################################################################
# ordering individual R by their posterior means
postMeanRi <- apply(Ri, 1, function(j) mean(j, na.rm = T))
postMeanRi[which(is.nan(postMeanRi), arr.ind = T)] <- NA
ord <- order(postMeanRi, na.last = FALSE)
Ri_ranked <- Ri[ord,]
Ri <- matrix(NA, m, numSamples)
avgGroupSize <- matrix(NA, m, numSamples)
avgPropInfectious <- matrix(NA, m, numSamples)
avgNumSusc <- matrix(NA, m, numSamples)
for(i in 1:m){
for(j in 1:numSamples){
if(!all(is.na(relRatesByIndivIter[i,,j]))){
Ri[i,j] <- sum(relRatesByIndivIter[i,,j], na.rm = T)
ttVec <- which(!is.na(relRatesByIndivIter[i,,j]))
groupSizeBytt <- NULL
propInfBytt <- NULL
numSuscBytt <- NULL
for(tt in ttVec){
g <- SocGroup[i,tt]
indiv_g_tt <- which(SocGroup[,tt]==g)
boolWhichAlive <- (deathTimes[indiv_g_tt, j]>tt)
boolWhichInf <- (infectivityTimes[indiv_g_tt, j]<tt & infectivityTimes[indiv_g_tt, j]>-10)
groupSize <- sum(boolWhichAlive)
if(groupSize==0){stop("groupSize=0")}
numInfectious <- sum(boolWhichAlive & boolWhichInf)
propInf <- numInfectious/groupSize
boolWhichNotInfected <- (infTimes[indiv_g_tt, j]==-10 | infTimes[indiv_g_tt, j]>tt+1)
numSusc <- sum(boolWhichAlive & boolWhichNotInfected)
groupSizeBytt <- c(groupSizeBytt, groupSize)
propInfBytt <- c(propInfBytt, propInf)
numSuscBytt <- c(numSuscBytt, numSusc)
}
avgGroupSize[i,j] <- mean(groupSizeBytt)
avgPropInfectious[i,j] <- mean(propInfBytt)
avgNumSusc[i,j] <- mean(numSuscBytt)
}
}
if(i%%200==0){print(i)}
}
postMeanInfPeriod <- rep(NA, m)
postMeanNumSocGroups <- rep(NA, m)
postMeanNumSocGroupsPerEIperiod <- rep(NA, m)
for(i in 1:m){
differenc <- NULL
numSocGroups <- NULL
numSocGroupsPerEIperiod <- NULL
for(j in 1:numSamples){
if(infTimes[i, j]!=-10 & deathTimes[i, j]!=-10){
if(infectivityTimes[i,j]==-10){ # if died before became infectious
differenc <- c(differenc, 0)
}else{
differenc <- c(differenc, deathTimes[i, j] - infectivityTimes[i, j])
}
socGroups <- unique(SocGroup[i, infTimes[i, j]:maxt])
socGroups <- socGroups[socGroups!=0]
numSocGroups <- c(numSocGroups, length(socGroups))
# numQuarters <- deathTimes[i, j] - infTimes[i, j]
numQuarters <- deathTimes[i, j] - infectivityTimes[i, j]
numSocGroupsPerEIperiod <- c(numSocGroupsPerEIperiod, length(socGroups)/numQuarters)
}
}
if(!is.null(differenc)){
postMeanInfPeriod[i] <- mean(differenc)
postMeanNumSocGroups[i] <- mean(numSocGroups)
postMeanNumSocGroupsPerEIperiod[i] <- mean(numSocGroupsPerEIperiod)
}
if(i%%200==0){print(i)}
}
postMeanNumSocGroups <- rep(NA, m)
postMeanNumSocGroupsPerEIperiod <- rep(NA, m)
for(i in 1:m){
numSocGroups <- NULL
numSocGroupsPerEIperiod <- NULL
for(j in 1:numSamples){
if(infectivityTimes[i, j]!=-10 & deathTimes[i, j]!=-10){
socGroups <- unique(SocGroup[i, infectivityTimes[i, j]:maxt])
socGroups <- socGroups[socGroups!=0]
numSocGroups <- c(numSocGroups, length(socGroups))
numQuarters <- deathTimes[i, j] - infectivityTimes[i, j]
numSocGroupsPerEIperiod <- c(numSocGroupsPerEIperiod, length(socGroups)/numQuarters)
}
}
# if(!is.null(differenc)){
postMeanNumSocGroups[i] <- mean(numSocGroups)
postMeanNumSocGroupsPerEIperiod[i] <- mean(numSocGroupsPerEIperiod)
# }
if(i%%200==0){print(i)}
}
postMeanRi <- apply(Ri, 1, function(x) mean(x, na.rm=T))
whichNotNA <- !is.na(postMeanRi)
postMeanRi_ <- postMeanRi[whichNotNA]
postMeanInfPeriod_ <- postMeanInfPeriod[whichNotNA]
postMeanNumSocGroups_ <- postMeanNumSocGroups[whichNotNA]
postMeanNumSocGroupsPerEIperiod_ <- postMeanNumSocGroupsPerEIperiod[whichNotNA]
avgGroupSize_ <- avgGroupSize[whichNotNA, ]
avgGroupSize_ = apply(avgGroupSize_, 1, function(x) mean(x, na.rm=T))
axisTextFontSize <- 16
axisTitleFontSize <- 16
th <- theme(axis.text=element_text(size=axisTextFontSize),
axis.title=element_text(size=axisTitleFontSize,face="bold"))
p <- list()
df <- data.frame(InfecPeriod=postMeanInfPeriod_, postMeanRi=postMeanRi_)
p[[1]] <- ggplot(df, aes(x=InfecPeriod, y=postMeanRi)) +
geom_point(size = 0.5) +
xlab("Infectious period (UNITS!!!!)") +
ylab(bquote("Posterior mean of "~R[i])) + th
p[[1]] <- p[[1]] + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
df <- data.frame(numSocGroups=postMeanNumSocGroups_, postMeanRi=postMeanRi_)
p[[2]] <- ggplot(df, aes(x=numSocGroups, y=postMeanRi)) +
geom_point(size = 0.5) +
xlab("Average number of social groups") +
ylab(bquote("Posterior mean of "~R[i])) + th
p[[2]] <- p[[2]] + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
df <- data.frame(numSocGroups=postMeanNumSocGroupsPerEIperiod_, postMeanRi=postMeanRi_)
p[[3]] <- ggplot(df, aes(x=numSocGroups, y=postMeanRi)) +
geom_point(size = 0.5) +
xlab("Average number of social groups / infectious period") +
ylab(bquote("Posterior mean of "~R[i])) + th
p[[3]] <- p[[3]] + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
df <- data.frame(avgGroupSize=avgGroupSize_, postMeanRi=postMeanRi_)
p[[4]] <- ggplot(df, aes(x=avgGroupSize, y=postMeanRi)) +
geom_point(size = 0.5) +
xlab("Average group size") +
ylab(bquote("Posterior mean of "~R[i])) + th
p[[4]] <- p[[4]] + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
## patchwork final plot
p <- wrap_plots(p, nrow = 2) +
plot_annotation(tag_levels = "a", theme = theme(plot.tag = element_text(size = 8, family = "Helvetica")))
fileName <- paste0(pathForPlots, "ExtendedFigure6.pdf")
ggsave("temp.pdf", p, width = 180, height = 120, units = "mm")
embed_fonts("temp.pdf", outfile = fileName)
file.remove("temp.pdf")
# df <- data.frame(numSocGroups=postMeanNumSocGroups_, InfecPeriod=postMeanInfPeriod_, postMeanRi=postMeanRi_)
# fileName <- paste0(pathForPlots, "Ri_InfectiousPeriod_numSocGroups.png")
# png(filename=fileName, width=700, height=500)
# print(ggplot(df, aes(x=numSocGroups, y=InfecPeriod)) +
#         geom_point(aes(color=postMeanRi, size=postMeanRi)) + scale_color_viridis_c()) +
#   xlab("Average number of social groups") +
#   ylab("Infectious period") +
#   labs(color="") + labs(size=bquote("Posterior mean of R"[i])) +
#   theme(axis.title=element_text(size=12,face="bold"))
# dev.off()
#
# df <- data.frame(avgGroupSize=avgGroupSize_, InfecPeriod=postMeanInfPeriod_, postMeanRi=postMeanRi_)
# fileName <- paste0(pathForPlots, "Ri_InfectiousPeriod_SocGroupSize.png")
# png(filename=fileName, width=700, height=500)
# print(ggplot(df, aes(x=avgGroupSize, y=InfecPeriod)) +
#         geom_point(aes(color=postMeanRi, size=postMeanRi)) + scale_color_viridis_c() +
#         xlab("Average group size") +
#         ylab("Infectious period") +
#         labs(color="") + labs(size=bquote("Posterior mean of R"[i])) +
#         theme(axis.title=element_text(size=12,face="bold")))
# dev.off()
#
# avgNumSusc_ <- avgNumSusc[whichNotNA, ]
# avgNumSusc_ = apply(avgNumSusc_, 1, function(x) mean(x, na.rm=T))
# df <- data.frame(avgNumSusc=avgNumSusc_, InfecPeriod=postMeanInfPeriod_, postMeanRi=postMeanRi_)
# fileName <- paste0(pathForPlots, "Ri_InfecPeriod_avgNumSuscSameSocGroup.png")
# png(filename=fileName, width=700, height=500)
# print(ggplot(df, aes(x=avgNumSusc, y=InfecPeriod)) +
#         geom_point(aes(color=postMeanRi, size=postMeanRi)) + scale_color_viridis_c() +
#         xlab("Average number of susceptibles in the same social group") +
#         ylab("Infectious period") +
#         labs(color="") + labs(size=bquote("Posterior mean of R"[i])) +
#         theme(axis.title=element_text(size=12,face="bold")))
# dev.off()
### Violin plots
# All individuals
df <- as.data.frame(t(Ri_ranked))
names(df) <- paste0("i", 1:m)
p <- PredWithCI(df=df,
title=NULL,
ylab=bquote(R[i]),
xlab="Ranked individuals",
col="black",
lwd=0.5,
prob=1-c(0.5, 0.75, 0.9, 0.95),
# alpha=c(0.1, 0.2, 0.3, 0.5),
timeGrid=1:m,
xlim=c(0,m+50),
ylim=c(0,12),
axisTextFontSize=16,
axisTitleFontSize=16,
mainTitleFontSize=12)
p <- p + theme_minimal(base_size = 7) +
theme(text = element_text(family = "Helvetica"))
## save for later patchwork
pIndR <- p
## combine patchwork
p <- pIndR + pPopR + plot_annotation(
tag_levels = "a",
theme = theme(plot.tag = element_text(size = 8, family = "Helvetica")))
fileName <- paste0(pathForPlots, "Fig4.pdf")
ggsave("temp.pdf", p, width = 89, height = 50, units = "mm")
embed_fonts("temp.pdf", outfile = fileName)
file.remove("temp.pdf")
library(BIID)
library(BIID)
