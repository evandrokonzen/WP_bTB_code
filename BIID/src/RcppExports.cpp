// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CheckSensSpec_
arma::imat CheckSensSpec_(int numTests, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::imat& X);
RcppExport SEXP _BIID_CheckSensSpec_(SEXP numTestsSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numTests(numTestsSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(CheckSensSpec_(numTests, TestField, TestTimes, X));
    return rcpp_result_gen;
END_RCPP
}
// logS
double logS(double age, double a2, double b2, double c1);
RcppExport SEXP _BIID_logS(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP c1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    rcpp_result_gen = Rcpp::wrap(logS(age, a2, b2, c1));
    return rcpp_result_gen;
END_RCPP
}
// DlogS_a2
double DlogS_a2(double age, double a2, double b2);
RcppExport SEXP _BIID_DlogS_a2(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(DlogS_a2(age, a2, b2));
    return rcpp_result_gen;
END_RCPP
}
// DlogS_b2
double DlogS_b2(double age, double a2, double b2);
RcppExport SEXP _BIID_DlogS_b2(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(DlogS_b2(age, a2, b2));
    return rcpp_result_gen;
END_RCPP
}
// DlogS_c1
double DlogS_c1(double age, double c1);
RcppExport SEXP _BIID_DlogS_c1(SEXP ageSEXP, SEXP c1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    rcpp_result_gen = Rcpp::wrap(DlogS_c1(age, c1));
    return rcpp_result_gen;
END_RCPP
}
// Dlogpt_a2
double Dlogpt_a2(double age, double a2, double b2);
RcppExport SEXP _BIID_Dlogpt_a2(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(Dlogpt_a2(age, a2, b2));
    return rcpp_result_gen;
END_RCPP
}
// Dlogpt_b2
double Dlogpt_b2(double age, double a2, double b2);
RcppExport SEXP _BIID_Dlogpt_b2(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    rcpp_result_gen = Rcpp::wrap(Dlogpt_b2(age, a2, b2));
    return rcpp_result_gen;
END_RCPP
}
// Dlogpt_c1
double Dlogpt_c1(double c1);
RcppExport SEXP _BIID_Dlogpt_c1(SEXP c1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    rcpp_result_gen = Rcpp::wrap(Dlogpt_c1(c1));
    return rcpp_result_gen;
END_RCPP
}
// fact
double fact(int k);
RcppExport SEXP _BIID_fact(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(fact(k));
    return rcpp_result_gen;
END_RCPP
}
// ErlangCDF
double ErlangCDF(int x_, int k, double tau);
RcppExport SEXP _BIID_ErlangCDF(SEXP x_SEXP, SEXP kSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(ErlangCDF(x_, k, tau));
    return rcpp_result_gen;
END_RCPP
}
// DerivErlangCDF
double DerivErlangCDF(int x_, int k, double tau);
RcppExport SEXP _BIID_DerivErlangCDF(SEXP x_SEXP, SEXP kSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x_(x_SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(DerivErlangCDF(x_, k, tau));
    return rcpp_result_gen;
END_RCPP
}
// HMC_
arma::vec HMC_(arma::vec curLogPars, int G, arma::imat& X, arma::imat& totalNumInfec, arma::imat& SocGroup, arma::imat& totalmPerGroup, arma::ivec& birthTimes, arma::ivec& startSamplingPeriod, arma::ivec& lastObsAliveTimes, arma::imat& capturesAfterMonit, arma::imat& ageMat, double epsilon, double L, arma::vec& hp_lambda, arma::vec& hp_beta, arma::vec& hp_q, arma::vec& hp_tau, arma::vec& hp_a2, arma::vec& hp_b2, arma::vec& hp_c1, int k, double K);
RcppExport SEXP _BIID_HMC_(SEXP curLogParsSEXP, SEXP GSEXP, SEXP XSEXP, SEXP totalNumInfecSEXP, SEXP SocGroupSEXP, SEXP totalmPerGroupSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP lastObsAliveTimesSEXP, SEXP capturesAfterMonitSEXP, SEXP ageMatSEXP, SEXP epsilonSEXP, SEXP LSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type curLogPars(curLogParsSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalNumInfec(totalNumInfecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalmPerGroup(totalmPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastObsAliveTimes(lastObsAliveTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type ageMat(ageMatSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(HMC_(curLogPars, G, X, totalNumInfec, SocGroup, totalmPerGroup, birthTimes, startSamplingPeriod, lastObsAliveTimes, capturesAfterMonit, ageMat, epsilon, L, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, k, K));
    return rcpp_result_gen;
END_RCPP
}
// HMC_2
arma::vec HMC_2(arma::vec curLogPars, int G, arma::imat& X, arma::imat& totalNumInfec, arma::imat& SocGroup, arma::imat& totalmPerGroup, arma::ivec& birthTimes, arma::ivec& startSamplingPeriod, arma::ivec& lastObsAliveTimes, arma::imat& capturesAfterMonit, arma::imat& ageMat, double epsilon, double epsilonalphas, double epsilonbq, double epsilontau, double epsilonc1, int nParsNotGibbs, double L, arma::vec& hp_lambda, arma::vec& hp_beta, arma::vec& hp_q, arma::vec& hp_tau, arma::vec& hp_a2, arma::vec& hp_b2, arma::vec& hp_c1, int k, double K);
RcppExport SEXP _BIID_HMC_2(SEXP curLogParsSEXP, SEXP GSEXP, SEXP XSEXP, SEXP totalNumInfecSEXP, SEXP SocGroupSEXP, SEXP totalmPerGroupSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP lastObsAliveTimesSEXP, SEXP capturesAfterMonitSEXP, SEXP ageMatSEXP, SEXP epsilonSEXP, SEXP epsilonalphasSEXP, SEXP epsilonbqSEXP, SEXP epsilontauSEXP, SEXP epsilonc1SEXP, SEXP nParsNotGibbsSEXP, SEXP LSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type curLogPars(curLogParsSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalNumInfec(totalNumInfecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalmPerGroup(totalmPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastObsAliveTimes(lastObsAliveTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type ageMat(ageMatSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonalphas(epsilonalphasSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonbq(epsilonbqSEXP);
    Rcpp::traits::input_parameter< double >::type epsilontau(epsilontauSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonc1(epsilonc1SEXP);
    Rcpp::traits::input_parameter< int >::type nParsNotGibbs(nParsNotGibbsSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(HMC_2(curLogPars, G, X, totalNumInfec, SocGroup, totalmPerGroup, birthTimes, startSamplingPeriod, lastObsAliveTimes, capturesAfterMonit, ageMat, epsilon, epsilonalphas, epsilonbq, epsilontau, epsilonc1, nParsNotGibbs, L, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, k, K));
    return rcpp_result_gen;
END_RCPP
}
// HMC_thetas_rhos
arma::vec HMC_thetas_rhos(arma::vec& thetas, arma::vec& rhos, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::vec& hp_theta, arma::vec& hp_rho, double epsilon, double L);
RcppExport SEXP _BIID_HMC_thetas_rhos(SEXP thetasSEXP, SEXP rhosSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP hp_thetaSEXP, SEXP hp_rhoSEXP, SEXP epsilonSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_theta(hp_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_rho(hp_rhoSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(HMC_thetas_rhos(thetas, rhos, X, startSamplingPeriod, endSamplingPeriod, TestField, TestTimes, hp_theta, hp_rho, epsilon, L));
    return rcpp_result_gen;
END_RCPP
}
// LocateIndiv
arma::imat LocateIndiv(const arma::imat& TestMat, arma::ivec& birthTimes);
RcppExport SEXP _BIID_LocateIndiv(SEXP TestMatSEXP, SEXP birthTimesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type TestMat(TestMatSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    rcpp_result_gen = Rcpp::wrap(LocateIndiv(TestMat, birthTimes));
    return rcpp_result_gen;
END_RCPP
}
// MCMCiFFBS_
arma::mat MCMCiFFBS_(int N, arma::vec initParamValues, const arma::imat& Xinit, const arma::imat& TestMat, const arma::imat& CaptHist, arma::ivec birthTimes, arma::ivec startSamplingPeriod, arma::ivec endSamplingPeriod, arma::ivec nuTimes, arma::imat CaptEffort, arma::imat capturesAfterMonit, int numSeasons, int seasonStart, unsigned int maxt, arma::vec hp_lambda, arma::vec hp_beta, arma::vec hp_q, arma::vec hp_tau, arma::vec hp_a2, arma::vec hp_b2, arma::vec hp_c1, arma::vec hp_nu, arma::vec hp_xi, arma::vec hp_theta, arma::vec hp_rho, arma::vec hp_phi, arma::vec hp_eta, int k, double K, double sd_xi_min, int method, double epsilon, double epsilonalphas, double epsilonbq, double epsilontau, double epsilonc1, double epsilonsens, int L, CharacterVector path, int blockSize);
RcppExport SEXP _BIID_MCMCiFFBS_(SEXP NSEXP, SEXP initParamValuesSEXP, SEXP XinitSEXP, SEXP TestMatSEXP, SEXP CaptHistSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP, SEXP nuTimesSEXP, SEXP CaptEffortSEXP, SEXP capturesAfterMonitSEXP, SEXP numSeasonsSEXP, SEXP seasonStartSEXP, SEXP maxtSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP hp_nuSEXP, SEXP hp_xiSEXP, SEXP hp_thetaSEXP, SEXP hp_rhoSEXP, SEXP hp_phiSEXP, SEXP hp_etaSEXP, SEXP kSEXP, SEXP KSEXP, SEXP sd_xi_minSEXP, SEXP methodSEXP, SEXP epsilonSEXP, SEXP epsilonalphasSEXP, SEXP epsilonbqSEXP, SEXP epsilontauSEXP, SEXP epsilonc1SEXP, SEXP epsilonsensSEXP, SEXP LSEXP, SEXP pathSEXP, SEXP blockSizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type initParamValues(initParamValuesSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type Xinit(XinitSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type TestMat(TestMatSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CaptHist(CaptHistSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type endSamplingPeriod(endSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type nuTimes(nuTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type CaptEffort(CaptEffortSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< int >::type numSeasons(numSeasonsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonStart(seasonStartSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxt(maxtSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_nu(hp_nuSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_xi(hp_xiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_theta(hp_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_rho(hp_rhoSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_phi(hp_phiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type hp_eta(hp_etaSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sd_xi_min(sd_xi_minSEXP);
    Rcpp::traits::input_parameter< int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonalphas(epsilonalphasSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonbq(epsilonbqSEXP);
    Rcpp::traits::input_parameter< double >::type epsilontau(epsilontauSEXP);
    Rcpp::traits::input_parameter< double >::type epsilonc1(epsilonc1SEXP);
    Rcpp::traits::input_parameter< double >::type epsilonsens(epsilonsensSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type path(pathSEXP);
    Rcpp::traits::input_parameter< int >::type blockSize(blockSizeSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMCiFFBS_(N, initParamValues, Xinit, TestMat, CaptHist, birthTimes, startSamplingPeriod, endSamplingPeriod, nuTimes, CaptEffort, capturesAfterMonit, numSeasons, seasonStart, maxt, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, hp_nu, hp_xi, hp_theta, hp_rho, hp_phi, hp_eta, k, K, sd_xi_min, method, epsilon, epsilonalphas, epsilonbq, epsilontau, epsilonc1, epsilonsens, L, path, blockSize));
    return rcpp_result_gen;
END_RCPP
}
// MakeSeasonVec_
arma::ivec MakeSeasonVec_(int numSeasons, int seasonStart, unsigned int maxt);
RcppExport SEXP _BIID_MakeSeasonVec_(SEXP numSeasonsSEXP, SEXP seasonStartSEXP, SEXP maxtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numSeasons(numSeasonsSEXP);
    Rcpp::traits::input_parameter< int >::type seasonStart(seasonStartSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxt(maxtSEXP);
    rcpp_result_gen = Rcpp::wrap(MakeSeasonVec_(numSeasons, seasonStart, maxt));
    return rcpp_result_gen;
END_RCPP
}
// ObsProcess_
void ObsProcess_(arma::mat& corrector, int t0, int endTime, int id, const arma::imat& CaptHist, arma::imat& TestMat_i, arma::ivec& TestTimes_i, arma::vec& etas, arma::vec& thetas, arma::vec& rhos, arma::vec& phis, arma::ivec& seasonVec);
RcppExport SEXP _BIID_ObsProcess_(SEXP correctorSEXP, SEXP t0SEXP, SEXP endTimeSEXP, SEXP idSEXP, SEXP CaptHistSEXP, SEXP TestMat_iSEXP, SEXP TestTimes_iSEXP, SEXP etasSEXP, SEXP thetasSEXP, SEXP rhosSEXP, SEXP phisSEXP, SEXP seasonVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type corrector(correctorSEXP);
    Rcpp::traits::input_parameter< int >::type t0(t0SEXP);
    Rcpp::traits::input_parameter< int >::type endTime(endTimeSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CaptHist(CaptHistSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type TestMat_i(TestMat_iSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type TestTimes_i(TestTimes_iSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type seasonVec(seasonVecSEXP);
    ObsProcess_(corrector, t0, endTime, id, CaptHist, TestMat_i, TestTimes_i, etas, thetas, rhos, phis, seasonVec);
    return R_NilValue;
END_RCPP
}
// RWMH_
arma::vec RWMH_(arma::vec can, arma::vec curLogPars, int G, arma::imat& X, arma::imat& totalNumInfec, arma::imat& SocGroup, arma::imat& totalmPerGroup, arma::ivec& birthTimes, arma::ivec& startSamplingPeriod, arma::ivec& lastObsAliveTimes, arma::imat& capturesAfterMonit, arma::imat& ageMat, arma::vec& hp_lambda, arma::vec& hp_beta, arma::vec& hp_q, arma::vec& hp_tau, arma::vec& hp_a2, arma::vec& hp_b2, arma::vec& hp_c1, int k, double K);
RcppExport SEXP _BIID_RWMH_(SEXP canSEXP, SEXP curLogParsSEXP, SEXP GSEXP, SEXP XSEXP, SEXP totalNumInfecSEXP, SEXP SocGroupSEXP, SEXP totalmPerGroupSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP lastObsAliveTimesSEXP, SEXP capturesAfterMonitSEXP, SEXP ageMatSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type can(canSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type curLogPars(curLogParsSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalNumInfec(totalNumInfecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalmPerGroup(totalmPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastObsAliveTimes(lastObsAliveTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type ageMat(ageMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(RWMH_(can, curLogPars, G, X, totalNumInfec, SocGroup, totalmPerGroup, birthTimes, startSamplingPeriod, lastObsAliveTimes, capturesAfterMonit, ageMat, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, k, K));
    return rcpp_result_gen;
END_RCPP
}
// RWMH_thetas_rhos
arma::vec RWMH_thetas_rhos(arma::vec& thetas, arma::vec& rhos, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::vec& hp_theta, arma::vec& hp_rho, arma::mat Sigma2);
RcppExport SEXP _BIID_RWMH_thetas_rhos(SEXP thetasSEXP, SEXP rhosSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP hp_thetaSEXP, SEXP hp_rhoSEXP, SEXP Sigma2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_theta(hp_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_rho(hp_rhoSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma2(Sigma2SEXP);
    rcpp_result_gen = Rcpp::wrap(RWMH_thetas_rhos(thetas, rhos, X, startSamplingPeriod, endSamplingPeriod, TestField, TestTimes, hp_theta, hp_rho, Sigma2));
    return rcpp_result_gen;
END_RCPP
}
// RWMH_xi
int RWMH_xi(int can, int cur, arma::vec& hp_xi, arma::field<arma::imat>& TestFieldProposal, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::vec& thetas, arma::vec& rhos, arma::vec& phis, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod);
RcppExport SEXP _BIID_RWMH_xi(SEXP canSEXP, SEXP curSEXP, SEXP hp_xiSEXP, SEXP TestFieldProposalSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP thetasSEXP, SEXP rhosSEXP, SEXP phisSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type can(canSEXP);
    Rcpp::traits::input_parameter< int >::type cur(curSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_xi(hp_xiSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestFieldProposal(TestFieldProposalSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    rcpp_result_gen = Rcpp::wrap(RWMH_xi(can, cur, hp_xi, TestFieldProposal, TestField, TestTimes, thetas, rhos, phis, X, startSamplingPeriod, endSamplingPeriod));
    return rcpp_result_gen;
END_RCPP
}
// TestMatAsField
arma::field<arma::imat> TestMatAsField(const arma::imat& TestMat, int m);
RcppExport SEXP _BIID_TestMatAsField(SEXP TestMatSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type TestMat(TestMatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(TestMatAsField(TestMat, m));
    return rcpp_result_gen;
END_RCPP
}
// TestMatAsFieldProposal
void TestMatAsFieldProposal(arma::field<arma::imat>& TestFieldProposal, const arma::field<arma::imat>& TestField, const arma::field<arma::ivec>& TestTimes, int xi, int xiCan, int m);
RcppExport SEXP _BIID_TestMatAsFieldProposal(SEXP TestFieldProposalSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP xiSEXP, SEXP xiCanSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestFieldProposal(TestFieldProposalSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< const arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< int >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< int >::type xiCan(xiCanSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    TestMatAsFieldProposal(TestFieldProposal, TestField, TestTimes, xi, xiCan, m);
    return R_NilValue;
END_RCPP
}
// TestTimesField
arma::field<arma::ivec> TestTimesField(const arma::imat& TestMat, int m);
RcppExport SEXP _BIID_TestTimesField(SEXP TestMatSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type TestMat(TestMatSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(TestTimesField(TestMat, m));
    return rcpp_result_gen;
END_RCPP
}
// TrProbDeath_
double TrProbDeath_(double age, double a2, double b2, double c1, bool logar);
RcppExport SEXP _BIID_TrProbDeath_(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP c1SEXP, SEXP logarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< bool >::type logar(logarSEXP);
    rcpp_result_gen = Rcpp::wrap(TrProbDeath_(age, a2, b2, c1, logar));
    return rcpp_result_gen;
END_RCPP
}
// TrProbSurvive_
double TrProbSurvive_(double age, double a2, double b2, double c1, bool logar);
RcppExport SEXP _BIID_TrProbSurvive_(SEXP ageSEXP, SEXP a2SEXP, SEXP b2SEXP, SEXP c1SEXP, SEXP logarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type age(ageSEXP);
    Rcpp::traits::input_parameter< double >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< double >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< double >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< bool >::type logar(logarSEXP);
    rcpp_result_gen = Rcpp::wrap(TrProbSurvive_(age, a2, b2, c1, logar));
    return rcpp_result_gen;
END_RCPP
}
// gradThetasRhos
arma::vec gradThetasRhos(arma::vec& thetas, arma::vec& rhos, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::vec& hp_theta, arma::vec& hp_rho);
RcppExport SEXP _BIID_gradThetasRhos(SEXP thetasSEXP, SEXP rhosSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP hp_thetaSEXP, SEXP hp_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_theta(hp_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_rho(hp_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(gradThetasRhos(thetas, rhos, X, startSamplingPeriod, endSamplingPeriod, TestField, TestTimes, hp_theta, hp_rho));
    return rcpp_result_gen;
END_RCPP
}
// grad_
arma::vec grad_(arma::vec& logPars, int G, arma::imat& X, arma::imat& totalNumInfec, arma::imat& SocGroup, arma::imat& totalmPerGroup, arma::ivec& birthTimes, arma::ivec& startSamplingPeriod, arma::ivec& lastObsAliveTimes, arma::imat& capturesAfterMonit, arma::imat& ageMat, arma::vec& hp_lambda, arma::vec& hp_beta, arma::vec& hp_q, arma::vec& hp_tau, arma::vec& hp_a2, arma::vec& hp_b2, arma::vec& hp_c1, int k, double K);
RcppExport SEXP _BIID_grad_(SEXP logParsSEXP, SEXP GSEXP, SEXP XSEXP, SEXP totalNumInfecSEXP, SEXP SocGroupSEXP, SEXP totalmPerGroupSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP lastObsAliveTimesSEXP, SEXP capturesAfterMonitSEXP, SEXP ageMatSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type logPars(logParsSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalNumInfec(totalNumInfecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalmPerGroup(totalmPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastObsAliveTimes(lastObsAliveTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type ageMat(ageMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_(logPars, G, X, totalNumInfec, SocGroup, totalmPerGroup, birthTimes, startSamplingPeriod, lastObsAliveTimes, capturesAfterMonit, ageMat, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, k, K));
    return rcpp_result_gen;
END_RCPP
}
// iFFBS_
void iFFBS_(arma::vec& alpha_js, double b, double q, double tau, int k, double K, arma::mat& probDyingMat, arma::mat& LogProbDyingMat, arma::mat& LogProbSurvMat, arma::cube& logProbRest, arma::ivec& nuTimes, arma::vec& nuEs, arma::vec& nuIs, arma::vec& thetas, arma::vec& rhos, arma::vec& phis, arma::vec& etas, int id, int birthTime, int startTime, int endTime, arma::imat& X, arma::ivec& seasonVec, arma::imat& TestMat_i, arma::ivec& TestTimes_i, const arma::imat& CaptHist, arma::mat& corrector, arma::mat& predProb, arma::mat& filtProb, arma::mat& logTransProbRest, arma::imat& numInfecMat, arma::imat& SocGroup, arma::imat& mPerGroup, arma::ivec& idVecAll, arma::mat& logProbStoSgivenSorE, arma::mat& logProbStoEgivenSorE, arma::mat& logProbStoSgivenI, arma::mat& logProbStoEgivenI, arma::mat& logProbStoSgivenD, arma::mat& logProbStoEgivenD, double& logProbEtoE, double& logProbEtoI, arma::field<arma::ivec>& whichRequireUpdate, double& sumLogCorrector);
RcppExport SEXP _BIID_iFFBS_(SEXP alpha_jsSEXP, SEXP bSEXP, SEXP qSEXP, SEXP tauSEXP, SEXP kSEXP, SEXP KSEXP, SEXP probDyingMatSEXP, SEXP LogProbDyingMatSEXP, SEXP LogProbSurvMatSEXP, SEXP logProbRestSEXP, SEXP nuTimesSEXP, SEXP nuEsSEXP, SEXP nuIsSEXP, SEXP thetasSEXP, SEXP rhosSEXP, SEXP phisSEXP, SEXP etasSEXP, SEXP idSEXP, SEXP birthTimeSEXP, SEXP startTimeSEXP, SEXP endTimeSEXP, SEXP XSEXP, SEXP seasonVecSEXP, SEXP TestMat_iSEXP, SEXP TestTimes_iSEXP, SEXP CaptHistSEXP, SEXP correctorSEXP, SEXP predProbSEXP, SEXP filtProbSEXP, SEXP logTransProbRestSEXP, SEXP numInfecMatSEXP, SEXP SocGroupSEXP, SEXP mPerGroupSEXP, SEXP idVecAllSEXP, SEXP logProbStoSgivenSorESEXP, SEXP logProbStoEgivenSorESEXP, SEXP logProbStoSgivenISEXP, SEXP logProbStoEgivenISEXP, SEXP logProbStoSgivenDSEXP, SEXP logProbStoEgivenDSEXP, SEXP logProbEtoESEXP, SEXP logProbEtoISEXP, SEXP whichRequireUpdateSEXP, SEXP sumLogCorrectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type alpha_js(alpha_jsSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type probDyingMat(probDyingMatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type LogProbDyingMat(LogProbDyingMatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type LogProbSurvMat(LogProbSurvMatSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type logProbRest(logProbRestSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type nuTimes(nuTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nuEs(nuEsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type nuIs(nuIsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type etas(etasSEXP);
    Rcpp::traits::input_parameter< int >::type id(idSEXP);
    Rcpp::traits::input_parameter< int >::type birthTime(birthTimeSEXP);
    Rcpp::traits::input_parameter< int >::type startTime(startTimeSEXP);
    Rcpp::traits::input_parameter< int >::type endTime(endTimeSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type seasonVec(seasonVecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type TestMat_i(TestMat_iSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type TestTimes_i(TestTimes_iSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type CaptHist(CaptHistSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type corrector(correctorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type predProb(predProbSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type filtProb(filtProbSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logTransProbRest(logTransProbRestSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type numInfecMat(numInfecMatSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type mPerGroup(mPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type idVecAll(idVecAllSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenSorE(logProbStoSgivenSorESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenSorE(logProbStoEgivenSorESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenI(logProbStoSgivenISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenI(logProbStoEgivenISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenD(logProbStoSgivenDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenD(logProbStoEgivenDSEXP);
    Rcpp::traits::input_parameter< double& >::type logProbEtoE(logProbEtoESEXP);
    Rcpp::traits::input_parameter< double& >::type logProbEtoI(logProbEtoISEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type whichRequireUpdate(whichRequireUpdateSEXP);
    Rcpp::traits::input_parameter< double& >::type sumLogCorrector(sumLogCorrectorSEXP);
    iFFBS_(alpha_js, b, q, tau, k, K, probDyingMat, LogProbDyingMat, LogProbSurvMat, logProbRest, nuTimes, nuEs, nuIs, thetas, rhos, phis, etas, id, birthTime, startTime, endTime, X, seasonVec, TestMat_i, TestTimes_i, CaptHist, corrector, predProb, filtProb, logTransProbRest, numInfecMat, SocGroup, mPerGroup, idVecAll, logProbStoSgivenSorE, logProbStoEgivenSorE, logProbStoSgivenI, logProbStoEgivenI, logProbStoSgivenD, logProbStoEgivenD, logProbEtoE, logProbEtoI, whichRequireUpdate, sumLogCorrector);
    return R_NilValue;
END_RCPP
}
// iFFBScalcLogProbRest
void iFFBScalcLogProbRest(int i, int ttt, arma::cube& logProbRest, arma::imat& X, arma::imat& SocGroup, arma::mat& LogProbDyingMat, arma::mat& LogProbSurvMat, arma::mat& logProbStoSgivenSorE, arma::mat& logProbStoEgivenSorE, arma::mat& logProbStoSgivenI, arma::mat& logProbStoEgivenI, arma::mat& logProbStoSgivenD, arma::mat& logProbStoEgivenD, double& logProbEtoE, double& logProbEtoI);
RcppExport SEXP _BIID_iFFBScalcLogProbRest(SEXP iSEXP, SEXP tttSEXP, SEXP logProbRestSEXP, SEXP XSEXP, SEXP SocGroupSEXP, SEXP LogProbDyingMatSEXP, SEXP LogProbSurvMatSEXP, SEXP logProbStoSgivenSorESEXP, SEXP logProbStoEgivenSorESEXP, SEXP logProbStoSgivenISEXP, SEXP logProbStoEgivenISEXP, SEXP logProbStoSgivenDSEXP, SEXP logProbStoEgivenDSEXP, SEXP logProbEtoESEXP, SEXP logProbEtoISEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type ttt(tttSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type logProbRest(logProbRestSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type LogProbDyingMat(LogProbDyingMatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type LogProbSurvMat(LogProbSurvMatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenSorE(logProbStoSgivenSorESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenSorE(logProbStoEgivenSorESEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenI(logProbStoSgivenISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenI(logProbStoEgivenISEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoSgivenD(logProbStoSgivenDSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logProbStoEgivenD(logProbStoEgivenDSEXP);
    Rcpp::traits::input_parameter< double& >::type logProbEtoE(logProbEtoESEXP);
    Rcpp::traits::input_parameter< double& >::type logProbEtoI(logProbEtoISEXP);
    iFFBScalcLogProbRest(i, ttt, logProbRest, X, SocGroup, LogProbDyingMat, LogProbSurvMat, logProbStoSgivenSorE, logProbStoEgivenSorE, logProbStoSgivenI, logProbStoEgivenI, logProbStoSgivenD, logProbStoEgivenD, logProbEtoE, logProbEtoI);
    return R_NilValue;
END_RCPP
}
// ivecMinus1
arma::uvec ivecMinus1(arma::ivec v);
RcppExport SEXP _BIID_ivecMinus1(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(ivecMinus1(v));
    return rcpp_result_gen;
END_RCPP
}
// vecSeq
arma::uvec vecSeq(int numTests);
RcppExport SEXP _BIID_vecSeq(SEXP numTestsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numTests(numTestsSEXP);
    rcpp_result_gen = Rcpp::wrap(vecSeq(numTests));
    return rcpp_result_gen;
END_RCPP
}
// logPostThetasRhos
double logPostThetasRhos(arma::vec& thetas, arma::vec& rhos, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod, arma::field<arma::imat>& TestField, arma::field<arma::ivec>& TestTimes, arma::vec& hp_theta, arma::vec& hp_rho);
RcppExport SEXP _BIID_logPostThetasRhos(SEXP thetasSEXP, SEXP rhosSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP, SEXP TestFieldSEXP, SEXP TestTimesSEXP, SEXP hp_thetaSEXP, SEXP hp_rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField(TestFieldSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_theta(hp_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_rho(hp_rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(logPostThetasRhos(thetas, rhos, X, startSamplingPeriod, endSamplingPeriod, TestField, TestTimes, hp_theta, hp_rho));
    return rcpp_result_gen;
END_RCPP
}
// logPostXi
double logPostXi(int xiMin, int xiMax, double xi, arma::vec& hp_xi, arma::field<arma::imat>& TestField_, arma::field<arma::ivec>& TestTimes, arma::vec& thetas, arma::vec& rhos, arma::vec& phis, arma::imat& X, arma::ivec& startSamplingPeriod, arma::ivec& endSamplingPeriod);
RcppExport SEXP _BIID_logPostXi(SEXP xiMinSEXP, SEXP xiMaxSEXP, SEXP xiSEXP, SEXP hp_xiSEXP, SEXP TestField_SEXP, SEXP TestTimesSEXP, SEXP thetasSEXP, SEXP rhosSEXP, SEXP phisSEXP, SEXP XSEXP, SEXP startSamplingPeriodSEXP, SEXP endSamplingPeriodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type xiMin(xiMinSEXP);
    Rcpp::traits::input_parameter< int >::type xiMax(xiMaxSEXP);
    Rcpp::traits::input_parameter< double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_xi(hp_xiSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::imat>& >::type TestField_(TestField_SEXP);
    Rcpp::traits::input_parameter< arma::field<arma::ivec>& >::type TestTimes(TestTimesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type thetas(thetasSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type rhos(rhosSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type phis(phisSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type endSamplingPeriod(endSamplingPeriodSEXP);
    rcpp_result_gen = Rcpp::wrap(logPostXi(xiMin, xiMax, xi, hp_xi, TestField_, TestTimes, thetas, rhos, phis, X, startSamplingPeriod, endSamplingPeriod));
    return rcpp_result_gen;
END_RCPP
}
// logPost_
double logPost_(arma::vec& logPars, int G, arma::imat& X, arma::imat& totalNumInfec, arma::imat& SocGroup, arma::imat& totalmPerGroup, arma::ivec& birthTimes, arma::ivec& startSamplingPeriod, arma::ivec& lastObsAliveTimes, arma::imat& capturesAfterMonit, arma::imat& ageMat, arma::vec& hp_lambda, arma::vec& hp_beta, arma::vec& hp_q, arma::vec& hp_tau, arma::vec& hp_a2, arma::vec& hp_b2, arma::vec& hp_c1, int k, double K);
RcppExport SEXP _BIID_logPost_(SEXP logParsSEXP, SEXP GSEXP, SEXP XSEXP, SEXP totalNumInfecSEXP, SEXP SocGroupSEXP, SEXP totalmPerGroupSEXP, SEXP birthTimesSEXP, SEXP startSamplingPeriodSEXP, SEXP lastObsAliveTimesSEXP, SEXP capturesAfterMonitSEXP, SEXP ageMatSEXP, SEXP hp_lambdaSEXP, SEXP hp_betaSEXP, SEXP hp_qSEXP, SEXP hp_tauSEXP, SEXP hp_a2SEXP, SEXP hp_b2SEXP, SEXP hp_c1SEXP, SEXP kSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type logPars(logParsSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalNumInfec(totalNumInfecSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type SocGroup(SocGroupSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type totalmPerGroup(totalmPerGroupSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type birthTimes(birthTimesSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type startSamplingPeriod(startSamplingPeriodSEXP);
    Rcpp::traits::input_parameter< arma::ivec& >::type lastObsAliveTimes(lastObsAliveTimesSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type capturesAfterMonit(capturesAfterMonitSEXP);
    Rcpp::traits::input_parameter< arma::imat& >::type ageMat(ageMatSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_lambda(hp_lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_beta(hp_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_q(hp_qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_tau(hp_tauSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_a2(hp_a2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_b2(hp_b2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type hp_c1(hp_c1SEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(logPost_(logPars, G, X, totalNumInfec, SocGroup, totalmPerGroup, birthTimes, startSamplingPeriod, lastObsAliveTimes, capturesAfterMonit, ageMat, hp_lambda, hp_beta, hp_q, hp_tau, hp_a2, hp_b2, hp_c1, k, K));
    return rcpp_result_gen;
END_RCPP
}
// logitD
double logitD(double x);
RcppExport SEXP _BIID_logitD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logitD(x));
    return rcpp_result_gen;
END_RCPP
}
// logisticD
double logisticD(double x);
RcppExport SEXP _BIID_logisticD(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticD(x));
    return rcpp_result_gen;
END_RCPP
}
// logit
arma::vec logit(arma::vec& x);
RcppExport SEXP _BIID_logit(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logit(x));
    return rcpp_result_gen;
END_RCPP
}
// logistic
arma::vec logistic(arma::vec& x);
RcppExport SEXP _BIID_logistic(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic(x));
    return rcpp_result_gen;
END_RCPP
}
// sumLogJacobian
double sumLogJacobian(arma::vec& xtilde);
RcppExport SEXP _BIID_sumLogJacobian(SEXP xtildeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type xtilde(xtildeSEXP);
    rcpp_result_gen = Rcpp::wrap(sumLogJacobian(xtilde));
    return rcpp_result_gen;
END_RCPP
}
// multrnorm
arma::vec multrnorm(arma::vec mu, arma::mat Sigma);
RcppExport SEXP _BIID_multrnorm(SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(multrnorm(mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// logdmultrnorm
double logdmultrnorm(arma::vec x, arma::vec mu, arma::mat Sigma);
RcppExport SEXP _BIID_logdmultrnorm(SEXP xSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(logdmultrnorm(x, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// randu
arma::vec randu(int n);
RcppExport SEXP _BIID_randu(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(randu(n));
    return rcpp_result_gen;
END_RCPP
}
// normTransProbRest
arma::rowvec normTransProbRest(arma::rowvec& logProbs);
RcppExport SEXP _BIID_normTransProbRest(SEXP logProbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec& >::type logProbs(logProbsSEXP);
    rcpp_result_gen = Rcpp::wrap(normTransProbRest(logProbs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BIID_CheckSensSpec_", (DL_FUNC) &_BIID_CheckSensSpec_, 4},
    {"_BIID_logS", (DL_FUNC) &_BIID_logS, 4},
    {"_BIID_DlogS_a2", (DL_FUNC) &_BIID_DlogS_a2, 3},
    {"_BIID_DlogS_b2", (DL_FUNC) &_BIID_DlogS_b2, 3},
    {"_BIID_DlogS_c1", (DL_FUNC) &_BIID_DlogS_c1, 2},
    {"_BIID_Dlogpt_a2", (DL_FUNC) &_BIID_Dlogpt_a2, 3},
    {"_BIID_Dlogpt_b2", (DL_FUNC) &_BIID_Dlogpt_b2, 3},
    {"_BIID_Dlogpt_c1", (DL_FUNC) &_BIID_Dlogpt_c1, 1},
    {"_BIID_fact", (DL_FUNC) &_BIID_fact, 1},
    {"_BIID_ErlangCDF", (DL_FUNC) &_BIID_ErlangCDF, 3},
    {"_BIID_DerivErlangCDF", (DL_FUNC) &_BIID_DerivErlangCDF, 3},
    {"_BIID_HMC_", (DL_FUNC) &_BIID_HMC_, 22},
    {"_BIID_HMC_2", (DL_FUNC) &_BIID_HMC_2, 27},
    {"_BIID_HMC_thetas_rhos", (DL_FUNC) &_BIID_HMC_thetas_rhos, 11},
    {"_BIID_LocateIndiv", (DL_FUNC) &_BIID_LocateIndiv, 2},
    {"_BIID_MCMCiFFBS_", (DL_FUNC) &_BIID_MCMCiFFBS_, 40},
    {"_BIID_MakeSeasonVec_", (DL_FUNC) &_BIID_MakeSeasonVec_, 3},
    {"_BIID_ObsProcess_", (DL_FUNC) &_BIID_ObsProcess_, 12},
    {"_BIID_RWMH_", (DL_FUNC) &_BIID_RWMH_, 21},
    {"_BIID_RWMH_thetas_rhos", (DL_FUNC) &_BIID_RWMH_thetas_rhos, 10},
    {"_BIID_RWMH_xi", (DL_FUNC) &_BIID_RWMH_xi, 12},
    {"_BIID_TestMatAsField", (DL_FUNC) &_BIID_TestMatAsField, 2},
    {"_BIID_TestMatAsFieldProposal", (DL_FUNC) &_BIID_TestMatAsFieldProposal, 6},
    {"_BIID_TestTimesField", (DL_FUNC) &_BIID_TestTimesField, 2},
    {"_BIID_TrProbDeath_", (DL_FUNC) &_BIID_TrProbDeath_, 5},
    {"_BIID_TrProbSurvive_", (DL_FUNC) &_BIID_TrProbSurvive_, 5},
    {"_BIID_gradThetasRhos", (DL_FUNC) &_BIID_gradThetasRhos, 9},
    {"_BIID_grad_", (DL_FUNC) &_BIID_grad_, 20},
    {"_BIID_iFFBS_", (DL_FUNC) &_BIID_iFFBS_, 44},
    {"_BIID_iFFBScalcLogProbRest", (DL_FUNC) &_BIID_iFFBScalcLogProbRest, 15},
    {"_BIID_ivecMinus1", (DL_FUNC) &_BIID_ivecMinus1, 1},
    {"_BIID_vecSeq", (DL_FUNC) &_BIID_vecSeq, 1},
    {"_BIID_logPostThetasRhos", (DL_FUNC) &_BIID_logPostThetasRhos, 9},
    {"_BIID_logPostXi", (DL_FUNC) &_BIID_logPostXi, 12},
    {"_BIID_logPost_", (DL_FUNC) &_BIID_logPost_, 20},
    {"_BIID_logitD", (DL_FUNC) &_BIID_logitD, 1},
    {"_BIID_logisticD", (DL_FUNC) &_BIID_logisticD, 1},
    {"_BIID_logit", (DL_FUNC) &_BIID_logit, 1},
    {"_BIID_logistic", (DL_FUNC) &_BIID_logistic, 1},
    {"_BIID_sumLogJacobian", (DL_FUNC) &_BIID_sumLogJacobian, 1},
    {"_BIID_multrnorm", (DL_FUNC) &_BIID_multrnorm, 2},
    {"_BIID_logdmultrnorm", (DL_FUNC) &_BIID_logdmultrnorm, 3},
    {"_BIID_randu", (DL_FUNC) &_BIID_randu, 1},
    {"_BIID_normTransProbRest", (DL_FUNC) &_BIID_normTransProbRest, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_BIID(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
